介绍：
    macvlan是Linux操作系统内核提供的网络虚拟化方案之一，更准确的说法是网卡虚拟化方案。它可以为一张物理网卡设置多个mac地址，
相当于物理网卡施展了分身之术，由一个变多个，同时要求物理网卡打开混杂模式。针对每个mac地址，都可以设置IP地址，本来是一块物理网卡连接到交换机，
现在是多块虚拟网卡连接到交换机。

准备工作：
    1、vmvare12创建两个虚拟机，操作系统ubuntu14， 64位。ip分别是：
    192.168.160.132（以下统称A虚拟机）
    192.168.160.133（以下统称B虚拟机）
    2、安装docker18.06.1-ce版。
       具体步骤见  https://blog.csdn.net/javahuazaili/article/details/82990987
    
开始：
    0、分别将A、B两台虚拟机的网卡为混杂模式：
        [root@ubuntu ~]# ip link set eth0 promisc on
        [root@ubuntu ~]# ifconfig
        eth0      Link encap:Ethernet  HWaddr 00:0c:29:ba:ad:82  
          inet addr:192.168.160.132  Bcast:192.168.160.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:feba:ad82/64 Scope:Link
          UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1
          RX packets:219063 errors:0 dropped:0 overruns:0 frame:0
          TX packets:76075 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:261281226 (261.2 MB)  TX bytes:5110580 (5.1 MB)

        可以看到有PROMISC字样，即设置成功。
        
    1、新建macvlan网络
        docker network create -d macvlan --subnet=192.168.160.0/24 --gateway192.168.160.1 -o parent=eth0 mynet
        参数说明： 
        -d macvlan: 创建macvlan网络，使用macvlan网络驱动 
        --subnet: 指定宿主机所在网段 
        --gateway: 指定宿主机所在网段网关, 必须是真实存在的网关,否则容器无法路由 
        -o parent: 继承指定网段的网卡
        
    2、在192.168.160.132上创建一个IP为192.168.160.11的docker容器。
        docker run --net=mynet --ip=192.168.160.10 -itd --name=mynginx docker.io/nginx bash
        参数说明：
            --net  macvlan的名字
            --ip   为容器分配的IP
            --name  容器名
    3、在192.168.160.133上创建一个IP为192.168.160.11的docker容器。
        docker run --net=mynet --ip=192.168.160.11 -itd --name=mynginx docker.io/nginx bash
        
    4、在容器内ping虚拟机A的IP：
        [root@330f64ca2b60 /]# ping 192.168.160.132
            PING 192.168.160.132 (192.168.160.132) 56(84) bytes of data.
            From 192.168.160.12 icmp_seq=1 Destination Host Unreachable
            From 192.168.160.12 icmp_seq=2 Destination Host Unreachable
        结果：无法ping通
        
    5、在容器内ping  windows系统的IP：
        可以ping通
        
    6、在容器内ping容器自身的IP：
        [root@330f64ca2b60 /]# ping 192.168.160.12
            PING 192.168.160.12 (192.168.160.12) 56(84) bytes of data.
            64 bytes from 192.168.160.12: icmp_seq=1 ttl=64 time=0.070 ms
            64 bytes from 192.168.160.12: icmp_seq=2 ttl=64 time=0.077 ms
        结果：可以ping通
    7、在容器内PING B虚拟机上的容器：
        可以ping通。
        
pipework：pipework是Docker公司工程师Jerome Petazzoni在Github上发布的名为pipework的工具。号称是容器网络的SDN解决方案，
    可以在复杂的场景下将容器连接起来。它既支持普通的LXC容器，也支持Docker容器。
    
    安装:
        下载  https://github.com/jpetazzo/pipework/archive/master.zip   
        解压后执行  cp -p pipework-master/pipework /usr/local/bin/
 方法一：
    在虚拟机A上创建容器：
        1、docker run --net=none -itd --name=test1 -h test1 busybox /bin/sh
        2、pipework eth0 test1 192.168.160.10/24@192.168.160.1
    在虚拟机B上创建容器：
        1、docker run --net=none -itd --name=test2 -h test2 busybox /bin/sh
        2、pipework eth0 test2 192.168.160.11/24@192.168.160.1
    
    执行过程大概包括：
        查看主机是否包含ens33，如果不存在就创建，向容器实例test1添加一块网卡，并配置固定IP：172.16.104.10，若test1已经有默认的路由，则删除掉，
        将@后面的172.16.104.1设置为默认路由的网关，将test1容器实例连接到创建的ens33上。
        
  方法二：
       1、在虚拟机A上创建网桥br0   具体指令： brctl addbr br0
       2、给网桥br0绑定一个IP   具体指令： ip addr add 192.168.160.148/24 dev br0   
       注意 192.168.160.132是虚拟机A的IP地址。 
        该方法效果较好, 容器和宿主机互通, 但是配置的时候需要通过VNC或者串口连接(单网卡), 要断网

    启动容器, pipework绑定过程和方法一相同, 这里省略

    $ ip addr add 192.168.160.132/24 dev br0
    $ ip addr del 192.168.160.132/24 dev eth0
    $ brctl addif br0 eth0
    $ ip route del default
    $ ip route add default via 192.168.160.1 dev br0
    过程中会断网, 可以写到一条命令中, 但实测过程中并不好用 (因为可能中间哪条抛错下面的就执行不了, 实测中第一次执行时候第四条抛错)

    ip addr add 192.168.160.132/24 dev br0;\
    ip addr del 192.168.160.132/24 dev eth0;\
    brctl addif br0 eth0;\
    ip route del default;\
    ip route add default via 192.168.160.1 dev br0;\
        
